#!/usr/bin/env bash
################################################################################
# This installer script checks out each of the VIPG Git projects, builds them
# and displays the necessary changes to your PATH environment variable to
# access the installed executables.
#
# The installer can also be used to update an existing installation. Just
# re-run it from the same directory/with the same arguments.
#
# For more information see the -h help output.
#
# Author: Sascha Friedmann                                     April 2012
################################################################################

# A list of all the VIPG Git projects that the installer script should
# install/update.
# Projects are built in the order they're listed in this array. The Gem5
# project must be built last, because it needs some of the other projects
# (hotspot and mcpat).
__VIPG_PROJECTS=(hotspot m5-mcpat-parser mcpat utils gem5-extra gem5-config gem5)
VIPG_PROJECTS=("${__VIPG_PROJECTS[@]}")

# The desired release
release=master

# Possible releases
releases=(v1.0 master next devel)

# The Git server/location where the VIPG projects are hosted.
git_server='https://git@github.com/danielpalomino'

# The number of parallel build jobs to use, e.g., make -j N or scons -j N.
build_jobs=1

usage="install [-h] [-g LOC] [-j N ] [-p PROJS] [RELEASE]

Install the VIPG simulator suite. If the suite is already installed, the script
updates it to the latest version. Release can be either master (default), next
or devel and denotes the release that should be installed.

	-g LOC    Location of the VIPG Git repositories. It defaults to
	          '$git_server', which is the CES's
	          Gitolite server for the VIPG projects. You can also supply
	          a Unix path, or anything that 'git fetch' accepts as its
	          'repository argument'.

                  To allow the installer to distinguish between a hostname and
                  a path, you must append a slash (/), if you're specyfing a
                  path and a colon (:), if you're specyfing a hostname/URL.

        -j N      Use up to N parallel instances/jobs for building the
	          projects, e.g., scons -j N or make -j N. The default is $build_jobs.

	-p PROJS  A list of Git repositories that the installer should
	          compile. It defaults to all projects, which are:
                  '${VIPG_PROJECTS[@]}'

        -P PROJS  Compile all the default projects except for those listed to
                  the -P command line switch. The -p and -P flag are mutually
	          exclusive.

	-h        Shows this help screen."

# Maps each project by name to a builder. A builder is a shell function that,
# when invoked in the project's directory, builds the project.
declare -A PROJ_BUILDER
PROJ_BUILDER["gem5"]=build_gem5
PROJ_BUILDER["gem5-config"]=:
PROJ_BUILDER["gem5-extra"]=:
PROJ_BUILDER["hotspot"]='{ make -f Makefile.testbed ; }'
PROJ_BUILDER["m5-mcpat-parser"]=:
PROJ_BUILDER["mcpat"]=build_autotools_project
PROJ_BUILDER["utils"]=:

# Maps each project by name to a path relative to $prefix, that should be
# expanded and added to the PATH environment variable.
declare -A PROJ_PATH
PROJ_PATH["gem5"]=gem5/util/term
PROJ_PATH["gem5-config"]=
PROJ_PATH["gem5-extra"]=
PROJ_PATH["hotspot"]=hotspot
PROJ_PATH["m5-mcpat-parser"]=m5-mcpat-parser
PROJ_PATH["mcpat"]=mcpat
PROJ_PATH["utils"]=

# Print all given arguments to stderr, then exit with status 1.
die()
{
    printf "%s\n" "$@" >&2
    exit 1
}

# Warn the user that a (non-)fatal error occurred.
error()
{
    printf "%s\n" "$@" >&2
}

# Parses the argument of the -p command line switch and sets VIPG_PROJECTS to
# the list of projects that should be installed/updated.
parse_project_list()
{
    # We iterate over the project list of the -p switch and check for each
    # argument if it's a valid project name and add it to VIPG_PROJECTS array.

    read -a projs <<< "$1"

    VIPG_PROJECTS=()

    for vipg_proj in "${__VIPG_PROJECTS[@]}"; do
        local include=
        for proj in "${projs[@]}"; do
            [[ "$proj" == "$vipg_proj" ]] && include=1
        done

        if (($include)); then
            VIPG_PROJECTS+=("$vipg_proj")
        fi
    done
}

# Parses the argument of the -P command line switch and sets VIPG_PROJECTS to
# all projects in __VIPG_PROJECTS except for those listed in the argument.
parse_proj_ignore_list()
{
    read -a ignore_list <<< "$1"

    VIPG_PROJECTS=()

    for proj in "${__VIPG_PROJECTS[@]}"; do
        local include=1
        for ignored in "${ignore_list[@]}"; do
            [[ "$proj" == "$ignored" ]] && include=
        done

        if (($include)); then
            VIPG_PROJECTS+=("$proj")
        fi
    done
}

# Show some information.
display_summary()
{
    echo -e "\n---------- Summary ----------"

    echo "Installing VIPG simulator suite"
    echo "Using Git server $git_server "
    printf "Building projects "; printf "'%s' " "${VIPG_PROJECTS[@]}" ; printf "\n"

    echo -e "-----------------------------\n"
}

# Build the project.
build_project()
{
    (cd "$1" && eval "${PROJ_BUILDER[$1]}") 1>&5 2>&5
}

# Build a project that uses the autotools toolchain, i.e., automake and
# autoconf.
build_autotools_project()
{
    autoreconf -i && ./configure && make "-j$build_jobs"
}

# Build the Gem5 project for the Alpha architecture.
build_gem5()
{
    # Include our extension modules, if they're also about to be installed.
    local extras=
    [[ -d ../m5-mcpat-parser/m5mbridge ]] && extras+=../m5-mcpat-parser/m5mbridge:
    [[ -d ../hotspot ]] && extras+=../hotspot:

    # Remove trailing colon
    extras=${extras:0:((${#extras}-1))}

    scons "-j$build_jobs" EXTRAS="$extras" build/ALPHA/gem5.opt build/X86/gem5.opt build/ARM/gem5.opt && \
    make -C util/term # Build m5term
}

# Collect the changes to the PATH variable and show them to the user.
display_new_path()
{
    paths=()
    for proj in "${VIPG_PROJECTS[@]}"; do
        proj_path="${PROJ_PATH[$proj]}"
        if [[ -n "$proj_path" ]]; then
            paths+=("$(readlink -f "${PWD}/${proj_path}")")
        fi
    done
    echo -e "\nTo make the VIPG projects visible in your PATH, add the following
statement to your shell's initialization file, e.g., ~/.bashrc for the Bash
shell."

    # Join the elements in the paths array by a colon. This is accomplished by
    # using the [*] expansion, which uses the first character in IFS to
    # concatenate the array elements.
    local oldIFS=$IFS
    IFS=:
    echo -e "\n-----------PATH--------------\nPATH=\$PATH:${paths[*]}\n-----------------------------"
    IFS=$oldIFS
}

gem5_path()
{
    echo "$(readlink -f "${prefix}/gem5")"
}

# Display the M5_PATH environment variable. This variable is used by M5 to find
# the system files, i.e., the kernel and disk image.
display_m5_path()
{
    echo -e "\nM5 queries the M5_PATH environment variable to locate the linux
kernel and disk image. Add any of the following statement to your shell's
initialization file, e.g., ~/.bashrc for the Bash shell.\n
---------M5_PATH-------------
M5_PATH=\"$PWD/gem5-extra/alpha\"\nexport M5_PATH
-----------------------------
M5_PATH=\"$PWD/gem5-extra/arm\"\nexport M5_PATH
-----------------------------
M5_PATH=\"$PWD/gem5-extra/x86\"\nexport M5_PATH
-----------------------------"

}

# Parse the command line
while getopts "h j: g: p: P:" arg; do
    case "$arg" in
        h) die "$usage" ;;
        j) build_jobs=$OPTARG ;;
        g) git_server=$OPTARG ;;
        p) parse_project_list "$OPTARG" ;;
        P) parse_proj_ignore_list "$OPTARG" ;;
    esac
done

# Check if the user supplied the RELEASE argument. If omitted, we use the default.
if ((OPTIND == $#)); then
    release=${@:((-1))}
fi

# Make sure that it's a valid release.
declare -i valid=0

for name in "${releases[@]}"; do
    [[ "$name" == "$release" ]] && valid=1
done

((valid)) || die "'$release' is not a valid release. Releases are: ${releases[@]}"

# Do all the hard work (fetching the release, installing and displaying the PATH)

display_summary && \
echo "------Fetching $release------" && \
echo git checkout "$release" && \
git checkout "$release" && \
if [[ "${VIPG_INSTALLER-no}" = no ]]; then \
    echo "-------------------------------------------------" && \
    echo "Installer might have been updated...restarting." && \
    echo "-------------------------------------------------" && \
    VIPG_INSTALLER= exec "$0" "$@" \
; else \
    echo "-----------------------------" && \
    echo -e "\n---------Building-----------" && \
    for proj in "${VIPG_PROJECTS[@]}"; do
		echo "Downloading $proj"
		echo git clone "$git_server/$proj.git"
		git clone "$git_server/$proj.git"
        echo "Building $proj"
        logfile_path="$proj"
        logfile="$logfile_path/build.log"
        build_project "$proj" 5>"$logfile" || \
        error "Building '$proj' failed. See $logfile for details."
    done && \
    echo "-----------------------------" && \
    display_new_path && \
    display_m5_path \
; fi
