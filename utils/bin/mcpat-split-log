#!/usr/bin/env bash
################################################################################
# Parse the output of McPAT and write each energy computation into its own log
# file. A custom pattern for log file names can be used (single command line
# argument).
#
# For details see the -h or --help output.
#
# Author: Sascha Friedmann <sascha.friedmann@student.kit.edu>    Date: Nov 2011
################################################################################

die()
{
    printf "%s\n" "$@" >&2
    exit 1
}

usage="$0 [-h|--help] [PATTERN]

    Read McPAT output, split individual computations and write them in
    separate log files.

    PATTERN	A template for log file names. If no pattern is given,
          	the script uses 'mcpat-report-%d'.

          	The following format specifiers are supported:

          	%d	Number of successive log file, starts at 1.
          	%%	A literal % sign.
"

(($# > 2)) && die "Illegal command line."$'\n\n'"${usage}"

if [[ "$1" == -*h || "$1" == *-help ]]; then
    echo "$usage"
    exit
fi

# TRANSLATION_TABLE is an associative array that maps each format specifier to
# a piece of bash code that generates the desired string that this specifier
# translates into.
declare -A TRANSLATION_TABLE
TRANSLATION_TABLE["%%"]='echo %'
TRANSLATION_TABLE["%d"]='echo $log_file_counter'
declare -r TRANSLATION_TABLE

# This counter is incremented each time the script detects the beginning of a
# McPAT energy computation report.
declare -i log_file_counter=0

# Usage: create_log_file_name PATTERN
# Substitutes every format specifier with the output of their associated code in TRANSLATION_TABLE.
create_log_file_name()
{
    (($# == 1)) || die 'create_log_file_name: invalid argument list: ' "$@"

    local file_name="$1"

    # Replace all format specifiers with their intended output.
    for specifier in "${!TRANSLATION_TABLE[@]}"; do
        repl="$(eval "${TRANSLATION_TABLE[$specifier]}")"
        file_name="${file_name//$specifier/$repl}"
    done

    printf "%s" "$file_name"
}

# Assign default pattern if no pattern was given.
(($#)) || set -- 'mcpat-report-%d'

# Initialize fd used to print into log file.
exec 5>&1

while read -r line; do
    if [[ "$line" =  McPAT*'results (current print level is 2, please increase print level to see the details in components):' ]]; then
        ((++log_file_counter))
        exec 5>"$(create_log_file_name "$1")"
    fi

    printf "$line\n" >&5
done
